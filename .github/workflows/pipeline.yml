name: Coffee with PHP pipeline

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: admin
      DB_PASSWORD: receitas123
      DB_DATABASE: receitas_db
      APP_KEY: base64:ht2SHIjcporyO95jkM2dqhuOg84IyVOmeesqrPdiFR0=
      IMAGE_NAME: coffee-with-php

    steps:
      - name: Check out the target repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        run: docker build -t ${{env.IMAGE_NAME}} --file Dockerfile.prod .

      - name: Run tests
        run: docker run --rm ${{env.IMAGE_NAME}} ./vendor/bin/phpunit tests/

  sast-analysis:
    name: Analise sast
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Trivy Vulnerability Report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          output: trivy-report.json
          format: json
          scan-ref: .
          exit-code: 0

      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 7

      - name: Fail build on High/Criticial Vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "fs"
          format: "table"
          severity: HIGH CRITICAL
          scan-ref: .
          exit-code: 1

  build:
    runs-on: ubuntu-latest
    needs: [test, sast-analysis]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_IMAGE_NAME}}:latest
